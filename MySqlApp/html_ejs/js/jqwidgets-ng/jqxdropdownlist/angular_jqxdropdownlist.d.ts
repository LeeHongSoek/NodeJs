/// <reference path="../jqwidgets.d.ts" />
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class jqxDropDownListComponent implements ControlValueAccessor, OnChanges, AfterViewInit, AfterViewChecked {
    attrAutoOpen: boolean;
    attrAutoDropDownHeight: boolean;
    attrAnimationType: string;
    attrCheckboxes: boolean;
    attrCloseDelay: number;
    attrDisabled: boolean;
    attrDisplayMember: string;
    attrDropDownHorizontalAlignment: string;
    attrDropDownVerticalAlignment: string;
    attrDropDownHeight: number | string;
    attrDropDownWidth: number | string;
    attrEnableSelection: boolean;
    attrEnableBrowserBoundsDetection: boolean;
    attrEnableHover: boolean;
    attrFilterable: boolean;
    attrFilterHeight: number;
    attrFilterDelay: number;
    attrFilterPlaceHolder: string;
    attrIncrementalSearch: boolean;
    attrIncrementalSearchDelay: number;
    attrItemHeight: number;
    attrOpenDelay: number;
    attrPlaceHolder: string;
    attrPopupZIndex: number;
    attrRtl: boolean;
    attrRenderer: (index?: jqwidgets.DropDownListRenderer['index'], label?: jqwidgets.DropDownListRenderer['label'], value?: jqwidgets.DropDownListRenderer['value']) => string;
    attrSelectionRenderer: (element?: jqwidgets.DropDownListSelectionRenderer['element'], index?: jqwidgets.DropDownListSelectionRenderer['index'], label?: jqwidgets.DropDownListSelectionRenderer['label'], value?: jqwidgets.DropDownListSelectionRenderer['value']) => string;
    attrSearchMode: string;
    attrSource: Array<any>;
    attrSelectedIndex: number;
    attrTheme: string;
    attrTemplate: string;
    attrValueMember: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxDropDownList;
    content: String;
    container: HTMLDivElement;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    autoOpen(arg?: boolean): boolean;
    autoDropDownHeight(arg?: boolean): boolean;
    animationType(arg?: string): string;
    checkboxes(arg?: boolean): boolean;
    closeDelay(arg?: number): number;
    disabled(arg?: boolean): boolean;
    displayMember(arg?: string): string;
    dropDownHorizontalAlignment(arg?: string): string;
    dropDownVerticalAlignment(arg?: string): string;
    dropDownHeight(arg?: number | string): number | string;
    dropDownWidth(arg?: number | string): number | string;
    enableSelection(arg?: boolean): boolean;
    enableBrowserBoundsDetection(arg?: boolean): boolean;
    enableHover(arg?: boolean): boolean;
    filterable(arg?: boolean): boolean;
    filterHeight(arg?: number): number;
    filterDelay(arg?: number): number;
    filterPlaceHolder(arg?: string): string;
    height(arg?: number | string): number | string;
    incrementalSearch(arg?: boolean): boolean;
    incrementalSearchDelay(arg?: number): number;
    itemHeight(arg?: number): number;
    openDelay(arg?: number): number;
    placeHolder(arg?: string): string;
    popupZIndex(arg?: number): number;
    rtl(arg?: boolean): boolean;
    renderer(arg?: (index?: jqwidgets.DropDownListRenderer['index'], label?: jqwidgets.DropDownListRenderer['label'], value?: jqwidgets.DropDownListRenderer['value']) => string): (index?: jqwidgets.DropDownListRenderer['index'], label?: jqwidgets.DropDownListRenderer['label'], value?: jqwidgets.DropDownListRenderer['value']) => string;
    selectionRenderer(arg?: (element?: jqwidgets.DropDownListSelectionRenderer['element'], index?: jqwidgets.DropDownListSelectionRenderer['index'], label?: jqwidgets.DropDownListSelectionRenderer['label'], value?: jqwidgets.DropDownListSelectionRenderer['value']) => string): (element?: jqwidgets.DropDownListSelectionRenderer['element'], index?: jqwidgets.DropDownListSelectionRenderer['index'], label?: jqwidgets.DropDownListSelectionRenderer['label'], value?: jqwidgets.DropDownListSelectionRenderer['value']) => string;
    searchMode(arg?: string): string;
    source(arg?: Array<any>): Array<any>;
    selectedIndex(arg?: number): number;
    theme(arg?: string): string;
    template(arg?: string): string;
    valueMember(arg?: string): string;
    width(arg?: number | string): number | string;
    addItem(item: jqwidgets.DropDownListItem): boolean;
    clearSelection(): void;
    clear(): void;
    close(): void;
    checkIndex(index: number): void;
    checkItem(item: any): void;
    checkAll(): void;
    clearFilter(): void;
    destroy(): void;
    disableItem(item: any): void;
    disableAt(index: number): void;
    enableItem(item: any): void;
    enableAt(index: number): void;
    ensureVisible(index: number): void;
    focus(): void;
    getItem(index: number): jqwidgets.DropDownListItem;
    getItemByValue(itemValue: string): jqwidgets.DropDownListItem;
    getItems(): Array<jqwidgets.DropDownListItem>;
    getCheckedItems(): Array<jqwidgets.DropDownListItem>;
    getSelectedItem(): jqwidgets.DropDownListItem;
    getSelectedIndex(): number;
    insertAt(item: jqwidgets.DropDownListItem, index: number): void;
    isOpened(): boolean;
    indeterminateIndex(index: number): void;
    indeterminateItem(item: any): void;
    loadFromSelect(arg: string): void;
    open(): void;
    removeItem(item: any): void;
    removeAt(index: number): void;
    selectIndex(index: number): void;
    selectItem(item: jqwidgets.DropDownListItem): void;
    setContent(content: string): void;
    updateItem(newItem: jqwidgets.DropDownListItem, item: any): void;
    updateAt(item: jqwidgets.DropDownListItem, index: number): void;
    unselectIndex(index: number): void;
    unselectItem(item: any): void;
    uncheckIndex(index: number): void;
    uncheckItem(item: any): void;
    uncheckAll(): void;
    val(value?: string): any;
    onBindingComplete: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onCheckChange: EventEmitter<any>;
    onChange: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onUnselect: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxDropDownListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxDropDownListComponent, "jqxDropDownList", never, { "attrAutoOpen": "autoOpen"; "attrAutoDropDownHeight": "autoDropDownHeight"; "attrAnimationType": "animationType"; "attrCheckboxes": "checkboxes"; "attrCloseDelay": "closeDelay"; "attrDisabled": "disabled"; "attrDisplayMember": "displayMember"; "attrDropDownHorizontalAlignment": "dropDownHorizontalAlignment"; "attrDropDownVerticalAlignment": "dropDownVerticalAlignment"; "attrDropDownHeight": "dropDownHeight"; "attrDropDownWidth": "dropDownWidth"; "attrEnableSelection": "enableSelection"; "attrEnableBrowserBoundsDetection": "enableBrowserBoundsDetection"; "attrEnableHover": "enableHover"; "attrFilterable": "filterable"; "attrFilterHeight": "filterHeight"; "attrFilterDelay": "filterDelay"; "attrFilterPlaceHolder": "filterPlaceHolder"; "attrIncrementalSearch": "incrementalSearch"; "attrIncrementalSearchDelay": "incrementalSearchDelay"; "attrItemHeight": "itemHeight"; "attrOpenDelay": "openDelay"; "attrPlaceHolder": "placeHolder"; "attrPopupZIndex": "popupZIndex"; "attrRtl": "rtl"; "attrRenderer": "renderer"; "attrSelectionRenderer": "selectionRenderer"; "attrSearchMode": "searchMode"; "attrSource": "source"; "attrSelectedIndex": "selectedIndex"; "attrTheme": "theme"; "attrTemplate": "template"; "attrValueMember": "valueMember"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onBindingComplete": "onBindingComplete"; "onClose": "onClose"; "onCheckChange": "onCheckChange"; "onChange": "onChange"; "onOpen": "onOpen"; "onSelect": "onSelect"; "onUnselect": "onUnselect"; }, never, ["*"]>;
}
