/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class jqxRatingComponent implements ControlValueAccessor, OnChanges {
    attrCount: number;
    attrDisabled: boolean;
    attrItemHeight: number;
    attrItemWidth: number;
    attrPrecision: number;
    attrSingleVote: boolean;
    attrValue: number;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxRating;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    count(arg?: number): number;
    disabled(arg?: boolean): boolean;
    height(arg?: string | number): string | number;
    itemHeight(arg?: number): number;
    itemWidth(arg?: number): number;
    precision(arg?: number): number;
    singleVote(arg?: boolean): boolean;
    value(arg?: number): number;
    width(arg?: string | number): string | number;
    disable(): void;
    enable(): void;
    getValue(): number;
    setValue(value: number): void;
    val(value?: number): any;
    onChange: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxRatingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxRatingComponent, "jqxRating", never, { "attrCount": "count"; "attrDisabled": "disabled"; "attrItemHeight": "itemHeight"; "attrItemWidth": "itemWidth"; "attrPrecision": "precision"; "attrSingleVote": "singleVote"; "attrValue": "value"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; }, never, ["*"]>;
}
