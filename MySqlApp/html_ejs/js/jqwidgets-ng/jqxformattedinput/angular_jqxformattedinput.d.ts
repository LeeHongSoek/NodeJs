/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class jqxFormattedInputComponent implements ControlValueAccessor, OnChanges {
    attrDisabled: boolean;
    attrDecimalNotation: string;
    attrDropDown: boolean;
    attrDropDownWidth: number | string;
    attrMin: number | string;
    attrMax: number | string;
    attrPlaceHolder: string;
    attrPopupZIndex: number;
    attrRoundedCorners: boolean;
    attrRtl: boolean;
    attrRadix: number | string;
    attrSpinButtons: boolean;
    attrSpinButtonsStep: number;
    attrTemplate: string;
    attrTheme: string;
    attrUpperCase: boolean;
    attrValue: number | string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxFormattedInput;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    get ngValue(): any;
    set ngValue(value: any);
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    disabled(arg?: boolean): boolean;
    decimalNotation(arg?: string): string;
    dropDown(arg?: boolean): boolean;
    dropDownWidth(arg?: number | string): number | string;
    height(arg?: number | string): number | string;
    min(arg?: number | string): number | string;
    max(arg?: number | string): number | string;
    placeHolder(arg?: string): string;
    popupZIndex(arg?: number): number;
    roundedCorners(arg?: boolean): boolean;
    rtl(arg?: boolean): boolean;
    radix(arg?: number | string): number | string;
    spinButtons(arg?: boolean): boolean;
    spinButtonsStep(arg?: number): number;
    template(arg?: string): string;
    theme(arg?: string): string;
    upperCase(arg?: boolean): boolean;
    value(arg?: undefined): undefined;
    width(arg?: number | string): number | string;
    close(): void;
    destroy(): void;
    focus(): void;
    open(): void;
    render(): void;
    refresh(): void;
    selectAll(): void;
    selectFirst(): void;
    selectLast(): void;
    val(value?: number | string): any;
    onChange: EventEmitter<any>;
    onClose: EventEmitter<any>;
    onOpen: EventEmitter<any>;
    onRadixChange: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxFormattedInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxFormattedInputComponent, "jqxFormattedInput", never, { "attrDisabled": "disabled"; "attrDecimalNotation": "decimalNotation"; "attrDropDown": "dropDown"; "attrDropDownWidth": "dropDownWidth"; "attrMin": "min"; "attrMax": "max"; "attrPlaceHolder": "placeHolder"; "attrPopupZIndex": "popupZIndex"; "attrRoundedCorners": "roundedCorners"; "attrRtl": "rtl"; "attrRadix": "radix"; "attrSpinButtons": "spinButtons"; "attrSpinButtonsStep": "spinButtonsStep"; "attrTemplate": "template"; "attrTheme": "theme"; "attrUpperCase": "upperCase"; "attrValue": "value"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; "onClose": "onClose"; "onOpen": "onOpen"; "onRadixChange": "onRadixChange"; }, never, never>;
}
