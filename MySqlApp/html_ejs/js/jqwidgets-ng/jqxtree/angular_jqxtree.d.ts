/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxTreeComponent implements OnChanges {
    attrAnimationShowDuration: number;
    attrAnimationHideDuration: number;
    attrAllowDrag: boolean;
    attrAllowDrop: boolean;
    attrCheckboxes: boolean;
    attrDragStart: (item: jqwidgets.TreeDragStart['item']) => boolean;
    attrDragEnd: (dragItem?: jqwidgets.TreeDragEnd['dragItem'], dropItem?: jqwidgets.TreeDragEnd['dropItem'], args?: jqwidgets.TreeDragEnd['args'], dropPosition?: jqwidgets.TreeDragEnd['dropPosition'], tree?: jqwidgets.TreeDragEnd['tree']) => boolean;
    attrDisabled: boolean;
    attrEasing: string;
    attrEnableHover: boolean;
    attrHasThreeStates: boolean;
    attrIncrementalSearch: boolean;
    attrKeyboardNavigation: boolean;
    attrRtl: boolean;
    attrSource: any;
    attrToggleIndicatorSize: number;
    attrToggleMode: string;
    attrTheme: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxTree;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    animationShowDuration(arg?: number): number;
    animationHideDuration(arg?: number): number;
    allowDrag(arg?: boolean): boolean;
    allowDrop(arg?: boolean): boolean;
    checkboxes(arg?: boolean): boolean;
    dragStart(arg?: (item: jqwidgets.TreeDragStart['item']) => boolean): (item: jqwidgets.TreeDragStart['item']) => boolean;
    dragEnd(arg?: (dragItem?: jqwidgets.TreeDragEnd['dragItem'], dropItem?: jqwidgets.TreeDragEnd['dropItem'], args?: jqwidgets.TreeDragEnd['args'], dropPosition?: jqwidgets.TreeDragEnd['dropPosition'], tree?: jqwidgets.TreeDragEnd['tree']) => boolean): (dragItem?: jqwidgets.TreeDragEnd['dragItem'], dropItem?: jqwidgets.TreeDragEnd['dropItem'], args?: jqwidgets.TreeDragEnd['args'], dropPosition?: jqwidgets.TreeDragEnd['dropPosition'], tree?: jqwidgets.TreeDragEnd['tree']) => boolean;
    disabled(arg?: boolean): boolean;
    easing(arg?: string): string;
    enableHover(arg?: boolean): boolean;
    height(arg?: number | string): number | string;
    hasThreeStates(arg?: boolean): boolean;
    incrementalSearch(arg?: boolean): boolean;
    keyboardNavigation(arg?: boolean): boolean;
    rtl(arg?: boolean): boolean;
    source(arg?: any): any;
    toggleIndicatorSize(arg?: number): number;
    toggleMode(arg?: string): string;
    theme(arg?: string): string;
    width(arg?: string | number): string | number;
    addBefore(item: any, id: string): void;
    addAfter(item: any, id: string): void;
    addTo(item: any, id: string | null): void;
    clear(): void;
    checkAll(): void;
    checkItem(item: any, checked: boolean): void;
    collapseAll(): void;
    collapseItem(item: any): void;
    destroy(): void;
    disableItem(item: any): void;
    ensureVisible(item: any): void;
    enableItem(item: any): void;
    enableAll(): void;
    expandAll(): void;
    expandItem(item: any): void;
    focus(): void;
    getCheckedItems(): Array<jqwidgets.TreeItem>;
    getUncheckedItems(): Array<jqwidgets.TreeItem>;
    getItems(): Array<jqwidgets.TreeItem>;
    getItem(element: any): jqwidgets.TreeItem;
    getSelectedItem(): jqwidgets.TreeItem;
    getPrevItem(item: any): jqwidgets.TreeItem;
    getNextItem(item: any): jqwidgets.TreeItem;
    hitTest(left: number, top: number): any;
    removeItem(item: any): void;
    render(): void;
    refresh(): void;
    selectItem(item: any): void;
    uncheckAll(): void;
    uncheckItem(item: any): void;
    updateItem(item: any, newItem: any): void;
    val(value?: string): any;
    onAdded: EventEmitter<any>;
    onCheckChange: EventEmitter<any>;
    onCollapse: EventEmitter<any>;
    onDragStart: EventEmitter<any>;
    onDragEnd: EventEmitter<any>;
    onExpand: EventEmitter<any>;
    onItemClick: EventEmitter<any>;
    onRemoved: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxTreeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxTreeComponent, "jqxTree", never, { "attrAnimationShowDuration": "animationShowDuration"; "attrAnimationHideDuration": "animationHideDuration"; "attrAllowDrag": "allowDrag"; "attrAllowDrop": "allowDrop"; "attrCheckboxes": "checkboxes"; "attrDragStart": "dragStart"; "attrDragEnd": "dragEnd"; "attrDisabled": "disabled"; "attrEasing": "easing"; "attrEnableHover": "enableHover"; "attrHasThreeStates": "hasThreeStates"; "attrIncrementalSearch": "incrementalSearch"; "attrKeyboardNavigation": "keyboardNavigation"; "attrRtl": "rtl"; "attrSource": "source"; "attrToggleIndicatorSize": "toggleIndicatorSize"; "attrToggleMode": "toggleMode"; "attrTheme": "theme"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onAdded": "onAdded"; "onCheckChange": "onCheckChange"; "onCollapse": "onCollapse"; "onDragStart": "onDragStart"; "onDragEnd": "onDragEnd"; "onExpand": "onExpand"; "onItemClick": "onItemClick"; "onRemoved": "onRemoved"; "onSelect": "onSelect"; }, never, ["*"]>;
}
