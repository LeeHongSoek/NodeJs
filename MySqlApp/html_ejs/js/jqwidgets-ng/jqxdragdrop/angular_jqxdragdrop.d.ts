/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxDragDropComponent implements OnChanges {
    attrAppendTo: string;
    attrDisabled: boolean;
    attrDistance: number;
    attrData: any;
    attrDropAction: string;
    attrDropTarget: any;
    attrDragZIndex: number;
    attrFeedback: string;
    attrInitFeedback: (feedback?: any) => void;
    attrOpacity: number;
    attrOnDragEnd: () => void;
    attrOnDrag: (data?: jqwidgets.DragDropOnDrag['data'], position?: jqwidgets.DragDropOnDrag['position']) => void;
    attrOnDragStart: (position?: jqwidgets.DragDropOnDragStart['position']) => void;
    attrOnTargetDrop: (data?: jqwidgets.DragDropOnTargetDrop['data']) => void;
    attrOnDropTargetEnter: () => void;
    attrOnDropTargetLeave: (data?: jqwidgets.DragDropOnDropTargetLeave['data']) => void;
    attrRestricter: string | object;
    attrRevert: boolean;
    attrRevertDuration: number;
    attrTolerance: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxDragDrop;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    appendTo(arg?: string): string;
    disabled(arg?: boolean): boolean;
    distance(arg?: number): number;
    data(arg?: any): any;
    dropAction(arg?: string): string;
    dropTarget(arg?: any): any;
    dragZIndex(arg?: number): number;
    feedback(arg?: string): string;
    initFeedback(arg?: (feedback?: any) => void): (feedback?: any) => void;
    opacity(arg?: number): number;
    onDragEnd(arg?: () => void): () => void;
    onDrag(arg?: (data?: jqwidgets.DragDropOnDrag['data'], position?: jqwidgets.DragDropOnDrag['position']) => void): (data?: jqwidgets.DragDropOnDrag['data'], position?: jqwidgets.DragDropOnDrag['position']) => void;
    onDragStart(arg?: (position?: jqwidgets.DragDropOnDragStart['position']) => void): (position?: jqwidgets.DragDropOnDragStart['position']) => void;
    onTargetDrop(arg?: (data?: jqwidgets.DragDropOnTargetDrop['data']) => void): (data?: jqwidgets.DragDropOnTargetDrop['data']) => void;
    onDropTargetEnter(arg?: () => void): () => void;
    onDropTargetLeave(arg?: (data?: jqwidgets.DragDropOnDropTargetLeave['data']) => void): (data?: jqwidgets.DragDropOnDropTargetLeave['data']) => void;
    restricter(arg?: string | object): string | object;
    revert(arg?: boolean): boolean;
    revertDuration(arg?: number): number;
    tolerance(arg?: string): string;
    ondragstart: EventEmitter<any>;
    ondragend: EventEmitter<any>;
    ondragging: EventEmitter<any>;
    ondroptargetenter: EventEmitter<any>;
    ondroptargetleave: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxDragDropComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxDragDropComponent, "jqxDragDrop", never, { "attrAppendTo": "appendTo"; "attrDisabled": "disabled"; "attrDistance": "distance"; "attrData": "data"; "attrDropAction": "dropAction"; "attrDropTarget": "dropTarget"; "attrDragZIndex": "dragZIndex"; "attrFeedback": "feedback"; "attrInitFeedback": "initFeedback"; "attrOpacity": "opacity"; "attrOnDragEnd": "onDragEnd"; "attrOnDrag": "onDrag"; "attrOnDragStart": "onDragStart"; "attrOnTargetDrop": "onTargetDrop"; "attrOnDropTargetEnter": "onDropTargetEnter"; "attrOnDropTargetLeave": "onDropTargetLeave"; "attrRestricter": "restricter"; "attrRevert": "revert"; "attrRevertDuration": "revertDuration"; "attrTolerance": "tolerance"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "ondragstart": "ondragstart"; "ondragend": "ondragend"; "ondragging": "ondragging"; "ondroptargetenter": "ondroptargetenter"; "ondroptargetleave": "ondroptargetleave"; }, never, ["*"]>;
}
