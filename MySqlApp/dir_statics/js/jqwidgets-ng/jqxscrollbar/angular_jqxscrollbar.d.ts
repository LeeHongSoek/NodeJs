/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxScrollBarComponent implements OnChanges {
    attrDisabled: boolean;
    attrLargestep: number;
    attrMin: number;
    attrMax: number;
    attrRtl: boolean;
    attrStep: number;
    attrShowButtons: boolean;
    attrThumbMinSize: number;
    attrTheme: string;
    attrVertical: boolean;
    attrValue: number;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxScrollBar;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    disabled(arg?: boolean): boolean;
    height(arg?: string | number): string | number;
    largestep(arg?: number): number;
    min(arg?: number): number;
    max(arg?: number): number;
    rtl(arg?: boolean): boolean;
    step(arg?: number): number;
    showButtons(arg?: boolean): boolean;
    thumbMinSize(arg?: number): number;
    theme(arg?: string): string;
    vertical(arg?: boolean): boolean;
    value(arg?: number): number;
    width(arg?: string | number): string | number;
    destroy(): void;
    isScrolling(): boolean;
    setPosition(index: number): void;
    onValueChanged: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxScrollBarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxScrollBarComponent, "jqxScrollBar", never, { "attrDisabled": "disabled"; "attrLargestep": "largestep"; "attrMin": "min"; "attrMax": "max"; "attrRtl": "rtl"; "attrStep": "step"; "attrShowButtons": "showButtons"; "attrThumbMinSize": "thumbMinSize"; "attrTheme": "theme"; "attrVertical": "vertical"; "attrValue": "value"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onValueChanged": "onValueChanged"; }, never, ["*"]>;
}
