/// <reference path="../jqwidgets.d.ts" />
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxDataTableComponent implements OnChanges, AfterViewInit, AfterViewChecked {
    attrAltRows: boolean;
    attrAutoRowHeight: boolean;
    attrAggregatesHeight: number;
    attrAutoShowLoadElement: boolean;
    attrColumnsHeight: number;
    attrColumns: Array<jqwidgets.DataTableColumns>;
    attrColumnGroups: Array<jqwidgets.DataTableColumnGroups>;
    attrColumnsResize: boolean;
    attrColumnsReorder: boolean;
    attrDisabled: boolean;
    attrEditable: boolean;
    attrEditSettings: jqwidgets.DataTableEditSettings;
    attrExportSettings: jqwidgets.DataTableExportSettings;
    attrEnableHover: boolean;
    attrEnableBrowserSelection: boolean;
    attrFilterable: boolean;
    attrFilterHeight: number;
    attrFilterMode: string;
    attrGroups: Array<any>;
    attrGroupsRenderer: (value?: jqwidgets.DataTableGroupsRenderer['value'], rowData?: jqwidgets.DataTableGroupsRenderer['rowdata'], level?: jqwidgets.DataTableGroupsRenderer['level']) => string;
    attrInitRowDetails: (id?: jqwidgets.DataTableInitRowDetails['id'], row?: jqwidgets.DataTableInitRowDetails['row'], element?: jqwidgets.DataTableInitRowDetails['element'], rowInfo?: jqwidgets.DataTableInitRowDetails['rowinfo']) => void;
    attrIncrementalSearch: boolean;
    attrLocalization: any;
    attrPagerHeight: number;
    attrPageSize: number;
    attrPageSizeOptions: Array<string | number>;
    attrPageable: boolean;
    attrPagerPosition: string;
    attrPagerMode: string;
    attrPagerButtonsCount: number;
    attrPagerRenderer: () => any;
    attrReady: () => void;
    attrRowDetails: boolean;
    attrRenderToolbar: (toolbar?: jqwidgets.DataTableRenderToolbar['toolbar']) => void;
    attrRenderStatusBar: (statusbar?: jqwidgets.DataTableRenderStatusBar['statusbar']) => void;
    attrRendering: () => void;
    attrRendered: () => void;
    attrRtl: boolean;
    attrSource: any;
    attrSortable: boolean;
    attrShowAggregates: boolean;
    attrShowToolbar: boolean;
    attrShowStatusbar: boolean;
    attrEnableSanitizeAll: boolean;
    attrStatusBarHeight: number;
    attrScrollBarSize: number | string;
    attrSelectionMode: string;
    attrServerProcessing: boolean;
    attrShowHeader: boolean;
    attrTheme: string;
    attrToolbarHeight: number;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxDataTable;
    content: String;
    container: HTMLDivElement;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    altRows(arg?: boolean): boolean;
    autoRowHeight(arg?: boolean): boolean;
    aggregatesHeight(arg?: number): number;
    autoShowLoadElement(arg?: boolean): boolean;
    columnsHeight(arg?: number): number;
    columns(arg?: Array<jqwidgets.DataTableColumns>): Array<jqwidgets.DataTableColumns>;
    columnGroups(arg?: Array<jqwidgets.DataTableColumnGroups>): Array<jqwidgets.DataTableColumnGroups>;
    columnsResize(arg?: boolean): boolean;
    columnsReorder(arg?: boolean): boolean;
    disabled(arg?: boolean): boolean;
    editable(arg?: boolean): boolean;
    editSettings(arg?: jqwidgets.DataTableEditSettings): jqwidgets.DataTableEditSettings;
    exportSettings(arg?: jqwidgets.DataTableExportSettings): jqwidgets.DataTableExportSettings;
    enableHover(arg?: boolean): boolean;
    enableBrowserSelection(arg?: boolean): boolean;
    filterable(arg?: boolean): boolean;
    filterHeight(arg?: number): number;
    filterMode(arg?: string): string;
    groups(arg?: Array<any>): Array<any>;
    groupsRenderer(arg?: (value?: jqwidgets.DataTableGroupsRenderer['value'], rowData?: jqwidgets.DataTableGroupsRenderer['rowdata'], level?: jqwidgets.DataTableGroupsRenderer['level']) => string): (value?: jqwidgets.DataTableGroupsRenderer['value'], rowData?: jqwidgets.DataTableGroupsRenderer['rowdata'], level?: jqwidgets.DataTableGroupsRenderer['level']) => string;
    height(arg?: number | string): number | string;
    initRowDetails(arg?: (id?: jqwidgets.DataTableInitRowDetails['id'], row?: jqwidgets.DataTableInitRowDetails['row'], element?: jqwidgets.DataTableInitRowDetails['element'], rowInfo?: jqwidgets.DataTableInitRowDetails['rowinfo']) => void): (id?: jqwidgets.DataTableInitRowDetails['id'], row?: jqwidgets.DataTableInitRowDetails['row'], element?: jqwidgets.DataTableInitRowDetails['element'], rowInfo?: jqwidgets.DataTableInitRowDetails['rowinfo']) => void;
    incrementalSearch(arg?: boolean): boolean;
    localization(arg?: any): any;
    pagerHeight(arg?: number): number;
    pageSize(arg?: number): number;
    pageSizeOptions(arg?: Array<string | number>): Array<string | number>;
    pageable(arg?: boolean): boolean;
    pagerPosition(arg?: string): string;
    pagerMode(arg?: string): string;
    pagerButtonsCount(arg?: number): number;
    pagerRenderer(arg?: () => any): () => any;
    ready(arg?: () => void): () => void;
    rowDetails(arg?: boolean): boolean;
    renderToolbar(arg?: (toolbar?: jqwidgets.DataTableRenderToolbar['toolbar']) => void): (toolbar?: jqwidgets.DataTableRenderToolbar['toolbar']) => void;
    renderStatusBar(arg?: (statusbar?: jqwidgets.DataTableRenderStatusBar['statusbar']) => void): (statusbar?: jqwidgets.DataTableRenderStatusBar['statusbar']) => void;
    rendering(arg?: () => void): () => void;
    rendered(arg?: () => void): () => void;
    rtl(arg?: boolean): boolean;
    source(arg?: any): any;
    sortable(arg?: boolean): boolean;
    showAggregates(arg?: boolean): boolean;
    showToolbar(arg?: boolean): boolean;
    showStatusbar(arg?: boolean): boolean;
    enableSanitizeAll(arg?: boolean): boolean;
    statusBarHeight(arg?: number): number;
    scrollBarSize(arg?: number | string): number | string;
    selectionMode(arg?: string): string;
    serverProcessing(arg?: boolean): boolean;
    showHeader(arg?: boolean): boolean;
    theme(arg?: string): string;
    toolbarHeight(arg?: number): number;
    width(arg?: string | number): string | number;
    addRow(rowIndex: number, rowData: any, rowPosition: any): void;
    addFilter(dataField: string, filerGroup: any): void;
    applyFilters(): void;
    beginUpdate(): void;
    beginRowEdit(rowIndex: number): void;
    beginCellEdit(rowIndex: number, dataField: string): void;
    clearSelection(): void;
    clearFilters(): void;
    clear(): void;
    destroy(): void;
    deleteRow(rowIndex: number): void;
    endUpdate(): void;
    ensureRowVisible(rowIndex: number): void;
    endRowEdit(rowIndex: number, cancelChanges: boolean): void;
    endCellEdit(rowIndex: number, dataField: string): void;
    exportData(exportDataType: any): any;
    focus(): void;
    getColumnProperty(dataField: string, propertyName: string): any;
    goToPage(pageIndex: number): void;
    goToPrevPage(): void;
    goToNextPage(): void;
    getSelection(): Array<any>;
    getRows(): Array<any>;
    getView(): Array<any>;
    getCellValue(rowIndex: number, dataField: string): any;
    hideColumn(dataField: string): void;
    hideDetails(rowIndex: boolean): void;
    isBindingCompleted(): boolean;
    lockRow(rowIndex: number): void;
    refresh(): void;
    render(): void;
    removeFilter(dataField: string): void;
    scrollOffset(top: number, left: number): void;
    setColumnProperty(dataField: string, propertyName: string, propertyValue: any): void;
    showColumn(dataField: string): void;
    selectRow(rowIndex: number): void;
    showDetails(rowIndex: number): void;
    setCellValue(rowIndex: number, dataField: string, value: any): void;
    sortBy(dataField: string, sortOrder: any): void;
    updating(): boolean;
    updateBoundData(): void;
    unselectRow(rowIndex: number): void;
    updateRow(rowIndex: number, rowData: any): void;
    unlockRow(rowIndex: number): void;
    onBindingComplete: EventEmitter<any>;
    onCellBeginEdit: EventEmitter<any>;
    onCellEndEdit: EventEmitter<any>;
    onCellValueChanged: EventEmitter<any>;
    onColumnResized: EventEmitter<any>;
    onColumnReordered: EventEmitter<any>;
    onSort: EventEmitter<any>;
    onFilter: EventEmitter<any>;
    onPageChanged: EventEmitter<any>;
    onPageSizeChanged: EventEmitter<any>;
    onRowClick: EventEmitter<any>;
    onRowDoubleClick: EventEmitter<any>;
    onRowSelect: EventEmitter<any>;
    onRowUnselect: EventEmitter<any>;
    onRowBeginEdit: EventEmitter<any>;
    onRowEndEdit: EventEmitter<any>;
    onRowExpand: EventEmitter<any>;
    onRowCollapse: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxDataTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxDataTableComponent, "jqxDataTable", never, { "attrAltRows": "altRows"; "attrAutoRowHeight": "autoRowHeight"; "attrAggregatesHeight": "aggregatesHeight"; "attrAutoShowLoadElement": "autoShowLoadElement"; "attrColumnsHeight": "columnsHeight"; "attrColumns": "columns"; "attrColumnGroups": "columnGroups"; "attrColumnsResize": "columnsResize"; "attrColumnsReorder": "columnsReorder"; "attrDisabled": "disabled"; "attrEditable": "editable"; "attrEditSettings": "editSettings"; "attrExportSettings": "exportSettings"; "attrEnableHover": "enableHover"; "attrEnableBrowserSelection": "enableBrowserSelection"; "attrFilterable": "filterable"; "attrFilterHeight": "filterHeight"; "attrFilterMode": "filterMode"; "attrGroups": "groups"; "attrGroupsRenderer": "groupsRenderer"; "attrInitRowDetails": "initRowDetails"; "attrIncrementalSearch": "incrementalSearch"; "attrLocalization": "localization"; "attrPagerHeight": "pagerHeight"; "attrPageSize": "pageSize"; "attrPageSizeOptions": "pageSizeOptions"; "attrPageable": "pageable"; "attrPagerPosition": "pagerPosition"; "attrPagerMode": "pagerMode"; "attrPagerButtonsCount": "pagerButtonsCount"; "attrPagerRenderer": "pagerRenderer"; "attrReady": "ready"; "attrRowDetails": "rowDetails"; "attrRenderToolbar": "renderToolbar"; "attrRenderStatusBar": "renderStatusBar"; "attrRendering": "rendering"; "attrRendered": "rendered"; "attrRtl": "rtl"; "attrSource": "source"; "attrSortable": "sortable"; "attrShowAggregates": "showAggregates"; "attrShowToolbar": "showToolbar"; "attrShowStatusbar": "showStatusbar"; "attrEnableSanitizeAll": "enableSanitizeAll"; "attrStatusBarHeight": "statusBarHeight"; "attrScrollBarSize": "scrollBarSize"; "attrSelectionMode": "selectionMode"; "attrServerProcessing": "serverProcessing"; "attrShowHeader": "showHeader"; "attrTheme": "theme"; "attrToolbarHeight": "toolbarHeight"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onBindingComplete": "onBindingComplete"; "onCellBeginEdit": "onCellBeginEdit"; "onCellEndEdit": "onCellEndEdit"; "onCellValueChanged": "onCellValueChanged"; "onColumnResized": "onColumnResized"; "onColumnReordered": "onColumnReordered"; "onSort": "onSort"; "onFilter": "onFilter"; "onPageChanged": "onPageChanged"; "onPageSizeChanged": "onPageSizeChanged"; "onRowClick": "onRowClick"; "onRowDoubleClick": "onRowDoubleClick"; "onRowSelect": "onRowSelect"; "onRowUnselect": "onRowUnselect"; "onRowBeginEdit": "onRowBeginEdit"; "onRowEndEdit": "onRowEndEdit"; "onRowExpand": "onRowExpand"; "onRowCollapse": "onRowCollapse"; }, never, ["*"]>;
}
