/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxTagCloudComponent implements OnChanges {
    attrAlterTextCase: string;
    attrDisabled: boolean;
    attrDisplayLimit: number;
    attrDisplayMember: string;
    attrDisplayValue: boolean;
    attrFontSizeUnit: string;
    attrMaxColor: string;
    attrMaxFontSize: number;
    attrMaxValueToDisplay: number;
    attrMinColor: string;
    attrMinFontSize: number;
    attrMinValueToDisplay: number;
    attrRtl: boolean;
    attrSortBy: string;
    attrSortOrder: string;
    attrSource: jqwidgets.TagCloudSource;
    attrTagRenderer: (itemData: jqwidgets.TagCloudTagRenderer['itemData'], minValue: jqwidgets.TagCloudTagRenderer['minValue'], valueRange: jqwidgets.TagCloudTagRenderer['valueRange']) => any;
    attrTakeTopWeightedItems: boolean;
    attrTextColor: string;
    attrUrlBase: string;
    attrUrlMember: string;
    attrValueMember: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxTagCloud;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    alterTextCase(arg?: string): string;
    disabled(arg?: boolean): boolean;
    displayLimit(arg?: number): number;
    displayMember(arg?: string): string;
    displayValue(arg?: boolean): boolean;
    fontSizeUnit(arg?: string): string;
    height(arg?: number | string): number | string;
    maxColor(arg?: string): string;
    maxFontSize(arg?: number): number;
    maxValueToDisplay(arg?: number): number;
    minColor(arg?: string): string;
    minFontSize(arg?: number): number;
    minValueToDisplay(arg?: number): number;
    rtl(arg?: boolean): boolean;
    sortBy(arg?: string): string;
    sortOrder(arg?: string): string;
    source(arg?: jqwidgets.TagCloudSource): jqwidgets.TagCloudSource;
    tagRenderer(arg?: (itemData: jqwidgets.TagCloudTagRenderer['itemData'], minValue: jqwidgets.TagCloudTagRenderer['minValue'], valueRange: jqwidgets.TagCloudTagRenderer['valueRange']) => any): (itemData: jqwidgets.TagCloudTagRenderer['itemData'], minValue: jqwidgets.TagCloudTagRenderer['minValue'], valueRange: jqwidgets.TagCloudTagRenderer['valueRange']) => any;
    takeTopWeightedItems(arg?: boolean): boolean;
    textColor(arg?: string): string;
    urlBase(arg?: string): string;
    urlMember(arg?: string): string;
    valueMember(arg?: string): string;
    width(arg?: string | number): string | number;
    destroy(): void;
    findTagIndex(tag: string): number;
    getHiddenTagsList(): Array<any>;
    getRenderedTags(): Array<any>;
    getTagsList(): Array<any>;
    hideItem(index: number): void;
    insertAt(index: number, item: any): void;
    removeAt(index: number): void;
    updateAt(index: number, item: any): void;
    showItem(index: number): void;
    onBindingComplete: EventEmitter<any>;
    onItemClick: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxTagCloudComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxTagCloudComponent, "jqxTagCloud", never, { "attrAlterTextCase": "alterTextCase"; "attrDisabled": "disabled"; "attrDisplayLimit": "displayLimit"; "attrDisplayMember": "displayMember"; "attrDisplayValue": "displayValue"; "attrFontSizeUnit": "fontSizeUnit"; "attrMaxColor": "maxColor"; "attrMaxFontSize": "maxFontSize"; "attrMaxValueToDisplay": "maxValueToDisplay"; "attrMinColor": "minColor"; "attrMinFontSize": "minFontSize"; "attrMinValueToDisplay": "minValueToDisplay"; "attrRtl": "rtl"; "attrSortBy": "sortBy"; "attrSortOrder": "sortOrder"; "attrSource": "source"; "attrTagRenderer": "tagRenderer"; "attrTakeTopWeightedItems": "takeTopWeightedItems"; "attrTextColor": "textColor"; "attrUrlBase": "urlBase"; "attrUrlMember": "urlMember"; "attrValueMember": "valueMember"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onBindingComplete": "onBindingComplete"; "onItemClick": "onItemClick"; }, never, ["*"]>;
}
