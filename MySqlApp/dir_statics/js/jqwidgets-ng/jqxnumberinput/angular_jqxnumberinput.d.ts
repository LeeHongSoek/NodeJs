/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class jqxNumberInputComponent implements ControlValueAccessor, OnChanges {
    attrAllowNull: boolean;
    attrDecimal: number | string;
    attrDisabled: boolean;
    attrDecimalDigits: number | string;
    attrDecimalSeparator: number | string;
    attrDigits: number | string;
    attrGroupSeparator: string;
    attrGroupSize: number | string;
    attrInputMode: string;
    attrMin: number | string;
    attrMax: number | string;
    attrNegativeSymbol: string;
    attrPlaceHolder: number | string;
    attrPromptChar: string;
    attrRtl: boolean;
    attrReadOnly: boolean;
    attrSpinMode: string;
    attrSpinButtons: boolean;
    attrSpinButtonsWidth: number;
    attrSpinButtonsStep: number | string;
    attrSymbol: string;
    attrSymbolPosition: string;
    attrTextAlign: string;
    attrTemplate: string;
    attrTheme: string;
    attrValue: number | string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxNumberInput;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    allowNull(arg?: boolean): boolean;
    decimal(arg?: number | string): number | string;
    disabled(arg?: boolean): boolean;
    decimalDigits(arg?: number | string): number | string;
    decimalSeparator(arg?: number | string): number | string;
    digits(arg?: number | string): number | string;
    groupSeparator(arg?: string): string;
    groupSize(arg?: number | string): number | string;
    height(arg?: string | number): string | number;
    inputMode(arg?: string): string;
    min(arg?: number | string): number | string;
    max(arg?: number | string): number | string;
    negativeSymbol(arg?: string): string;
    placeHolder(arg?: number | string): number | string;
    promptChar(arg?: string): string;
    rtl(arg?: boolean): boolean;
    readOnly(arg?: boolean): boolean;
    spinMode(arg?: string): string;
    spinButtons(arg?: boolean): boolean;
    spinButtonsWidth(arg?: number): number;
    spinButtonsStep(arg?: number | string): number | string;
    symbol(arg?: string): string;
    symbolPosition(arg?: string): string;
    textAlign(arg?: string): string;
    template(arg?: string): string;
    theme(arg?: string): string;
    value(arg?: number | string): number | string;
    width(arg?: string | number): string | number;
    clear(): void;
    destroy(): void;
    focus(): void;
    getDecimal(): number;
    setDecimal(index: number | string): void;
    val(value?: number | string): any;
    onChange: EventEmitter<any>;
    onTextchanged: EventEmitter<any>;
    onValueChanged: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxNumberInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxNumberInputComponent, "jqxNumberInput", never, { "attrAllowNull": "allowNull"; "attrDecimal": "decimal"; "attrDisabled": "disabled"; "attrDecimalDigits": "decimalDigits"; "attrDecimalSeparator": "decimalSeparator"; "attrDigits": "digits"; "attrGroupSeparator": "groupSeparator"; "attrGroupSize": "groupSize"; "attrInputMode": "inputMode"; "attrMin": "min"; "attrMax": "max"; "attrNegativeSymbol": "negativeSymbol"; "attrPlaceHolder": "placeHolder"; "attrPromptChar": "promptChar"; "attrRtl": "rtl"; "attrReadOnly": "readOnly"; "attrSpinMode": "spinMode"; "attrSpinButtons": "spinButtons"; "attrSpinButtonsWidth": "spinButtonsWidth"; "attrSpinButtonsStep": "spinButtonsStep"; "attrSymbol": "symbol"; "attrSymbolPosition": "symbolPosition"; "attrTextAlign": "textAlign"; "attrTemplate": "template"; "attrTheme": "theme"; "attrValue": "value"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; "onTextchanged": "onTextchanged"; "onValueChanged": "onValueChanged"; }, never, never>;
}
