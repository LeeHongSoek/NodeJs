/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxKnobComponent implements OnChanges {
    attrAllowValueChangeOnClick: boolean;
    attrAllowValueChangeOnDrag: boolean;
    attrAllowValueChangeOnMouseWheel: boolean;
    attrChanging: (oldValue: jqwidgets.KnobChanging['oldValue'] | jqwidgets.KnobChanging['oldValue'][], newValue: jqwidgets.KnobChanging['newValue'] | jqwidgets.KnobChanging['newValue'][]) => boolean;
    attrDragEndAngle: number;
    attrDragStartAngle: number;
    attrDisabled: boolean;
    attrDial: jqwidgets.KnobDial;
    attrEndAngle: number;
    attrLabels: jqwidgets.KnobLabels;
    attrMarks: jqwidgets.KnobMarks;
    attrMin: number;
    attrMax: number;
    attrProgressBar: jqwidgets.KnobProgressBar;
    attrPointer: jqwidgets.KnobPointer | jqwidgets.KnobPointer[];
    attrPointerGrabAction: string;
    attrRotation: string;
    attrStartAngle: number;
    attrSpinner: jqwidgets.KnobSpinner;
    attrStyles: jqwidgets.KnobStyle;
    attrStep: number | string;
    attrSnapToStep: boolean;
    attrValue: any;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxKnob;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    allowValueChangeOnClick(arg?: boolean): boolean;
    allowValueChangeOnDrag(arg?: boolean): boolean;
    allowValueChangeOnMouseWheel(arg?: boolean): boolean;
    changing(arg?: (oldValue: jqwidgets.KnobChanging['oldValue'] | jqwidgets.KnobChanging['oldValue'][], newValue: jqwidgets.KnobChanging['newValue'] | jqwidgets.KnobChanging['newValue'][]) => boolean): (oldValue: jqwidgets.KnobChanging['oldValue'] | jqwidgets.KnobChanging['oldValue'][], newValue: jqwidgets.KnobChanging['newValue'] | jqwidgets.KnobChanging['newValue'][]) => boolean;
    dragEndAngle(arg?: number): number;
    dragStartAngle(arg?: number): number;
    disabled(arg?: boolean): boolean;
    dial(arg?: jqwidgets.KnobDial): jqwidgets.KnobDial;
    endAngle(arg?: number): number;
    height(arg?: number | string): number | string;
    labels(arg?: jqwidgets.KnobLabels): jqwidgets.KnobLabels;
    marks(arg?: jqwidgets.KnobMarks): jqwidgets.KnobMarks;
    min(arg?: number): number;
    max(arg?: number): number;
    progressBar(arg?: jqwidgets.KnobProgressBar): jqwidgets.KnobProgressBar;
    pointer(arg?: jqwidgets.KnobPointer | jqwidgets.KnobPointer[]): jqwidgets.KnobPointer | jqwidgets.KnobPointer[];
    pointerGrabAction(arg?: string): string;
    rotation(arg?: string): string;
    startAngle(arg?: number): number;
    spinner(arg?: jqwidgets.KnobSpinner): jqwidgets.KnobSpinner;
    styles(arg?: jqwidgets.KnobStyle): jqwidgets.KnobStyle;
    step(arg?: number | string): number | string;
    snapToStep(arg?: boolean): boolean;
    value(arg?: any): any;
    width(arg?: number | string): number | string;
    destroy(): void;
    val(value?: number | string): any;
    onChange: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxKnobComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxKnobComponent, "jqxKnob", never, { "attrAllowValueChangeOnClick": "allowValueChangeOnClick"; "attrAllowValueChangeOnDrag": "allowValueChangeOnDrag"; "attrAllowValueChangeOnMouseWheel": "allowValueChangeOnMouseWheel"; "attrChanging": "changing"; "attrDragEndAngle": "dragEndAngle"; "attrDragStartAngle": "dragStartAngle"; "attrDisabled": "disabled"; "attrDial": "dial"; "attrEndAngle": "endAngle"; "attrLabels": "labels"; "attrMarks": "marks"; "attrMin": "min"; "attrMax": "max"; "attrProgressBar": "progressBar"; "attrPointer": "pointer"; "attrPointerGrabAction": "pointerGrabAction"; "attrRotation": "rotation"; "attrStartAngle": "startAngle"; "attrSpinner": "spinner"; "attrStyles": "styles"; "attrStep": "step"; "attrSnapToStep": "snapToStep"; "attrValue": "value"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; }, never, ["*"]>;
}
