/// <reference path="../jqwidgets.d.ts" />
import { AfterViewInit, AfterViewChecked, EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxGridComponent implements OnChanges, AfterViewInit, AfterViewChecked {
    attrAltrows: boolean;
    attrAltstart: number;
    attrAltstep: number;
    attrAutoshowloadelement: boolean;
    attrAutoshowfiltericon: boolean;
    attrAutoshowcolumnsmenubutton: boolean;
    attrShowcolumnlines: boolean;
    attrShowrowlines: boolean;
    attrShowcolumnheaderlines: boolean;
    attrAdaptive: boolean;
    attrAdaptivewidth: number;
    attrCommandcolumn: boolean;
    attrCommandcolumnrenderer: (row?: number, columnfield?: string, active?: any) => string;
    attrClipboard: boolean;
    attrCloseablegroups: boolean;
    attrColumnsmenuwidth: number;
    attrColumnmenuopening: (menu?: jqwidgets.GridColumnmenuopening['menu'], datafield?: jqwidgets.GridColumnmenuopening['datafield'], height?: jqwidgets.GridColumnmenuopening['height']) => boolean | void;
    attrColumnmenuclosing: (menu?: jqwidgets.GridColumnmenuclosing['menu'], datafield?: jqwidgets.GridColumnmenuclosing['datafield'], height?: jqwidgets.GridColumnmenuclosing['height']) => boolean;
    attrCellhover: (cellhtmlElement?: jqwidgets.GridCellhover['cellhtmlElement'], x?: jqwidgets.GridCellhover['x'], y?: jqwidgets.GridCellhover['y']) => void;
    attrEnablekeyboarddelete: boolean;
    attrEnableellipsis: boolean;
    attrEnablemousewheel: boolean;
    attrEnableanimations: boolean;
    attrEnabletooltips: boolean;
    attrEnablehover: boolean;
    attrEnablebrowserselection: boolean;
    attrEverpresentrowposition: string;
    attrEverpresentrowheight: number;
    attrEverpresentrowactions: string;
    attrEverpresentrowactionsmode: string;
    attrFilterrowheight: number;
    attrFiltermode: string;
    attrGroupsrenderer: (text?: jqwidgets.GridGroupsrenderer['text'], group?: jqwidgets.GridGroupsrenderer['group'], expanded?: jqwidgets.GridGroupsrenderer['expanded'], data?: jqwidgets.GridGroupsrenderer['data']) => string;
    attrGroupcolumnrenderer: (text?: jqwidgets.GridGroupcolumnrenderer['text']) => string;
    attrGroupsexpandedbydefault: boolean;
    attrHandlekeyboardnavigation: (event: jqwidgets.GridHandlekeyboardnavigation['event']) => boolean;
    attrPagerrenderer: () => any[];
    attrRtl: boolean;
    attrShowdefaultloadelement: boolean;
    attrShowfiltercolumnbackground: boolean;
    attrShowfiltermenuitems: boolean;
    attrShowpinnedcolumnbackground: boolean;
    attrShowsortcolumnbackground: boolean;
    attrShowsortmenuitems: boolean;
    attrShowgroupmenuitems: boolean;
    attrShowrowdetailscolumn: boolean;
    attrShowheader: boolean;
    attrShowgroupsheader: boolean;
    attrShowaggregates: boolean;
    attrShowgroupaggregates: boolean;
    attrShoweverpresentrow: boolean;
    attrShowfilterrow: boolean;
    attrShowemptyrow: boolean;
    attrShowstatusbar: boolean;
    attrStatusbarheight: number;
    attrShowtoolbar: boolean;
    attrShowfilterbar: boolean;
    attrFilterbarmode: string;
    attrSelectionmode: string;
    attrUpdatefilterconditions: (type?: string, defaultconditions?: any) => any;
    attrUpdatefilterpanel: (filtertypedropdown1?: any, filtertypedropdown2?: any, filteroperatordropdown?: any, filterinputfield1?: any, filterinputfield2?: any, filterbutton?: any, clearbutton?: any, columnfilter?: any, filtertype?: any, filterconditions?: any) => any;
    attrTheme: string;
    attrToolbarheight: number;
    attrAutoheight: boolean;
    attrAutorowheight: boolean;
    attrColumnsheight: number;
    attrDeferreddatafields: Array<string>;
    attrGroupsheaderheight: number;
    attrGroupindentwidth: number;
    attrPagerheight: number | string;
    attrRowsheight: number;
    attrScrollbarsize: number | string;
    attrScrollmode: string;
    attrScrollfeedback: (row: jqwidgets.GridScrollfeedback['row']) => string;
    attrAutosavestate: boolean;
    attrAutoloadstate: boolean;
    attrColumns: jqwidgets.GridColumn[];
    attrEnableSanitize: boolean;
    attrCardview: boolean;
    attrCardviewcolumns: any;
    attrCardheight: number;
    attrCardsize: number;
    attrColumngroups: Array<any>;
    attrColumnsmenu: boolean;
    attrColumnsresize: boolean;
    attrColumnsautoresize: boolean;
    attrColumnsreorder: boolean;
    attrCharting: jqwidgets.GridCharting;
    attrDisabled: boolean;
    attrEditable: boolean;
    attrBatcheditable: boolean;
    attrEditmode: string;
    attrFilter: (cellValue?: jqwidgets.GridFilter['cellValue'], rowData?: jqwidgets.GridFilter['rowData'], dataField?: jqwidgets.GridFilter['dataField'], filterGroup?: jqwidgets.GridFilter['filterGroup'], defaultFilterResult?: jqwidgets.GridFilter['defaultFilterResult']) => any;
    attrFilterable: boolean;
    attrGroupable: boolean;
    attrGroups: Array<string>;
    attrHorizontalscrollbarstep: number;
    attrHorizontalscrollbarlargestep: number;
    attrInitrowdetails: (index?: number, parentElement?: any, gridElement?: any, datarecord?: any) => void;
    attrKeyboardnavigation: boolean;
    attrLocalization: jqwidgets.GridLocalizationobject;
    attrPagesize: number;
    attrPagesizeoptions: Array<number | string>;
    attrPagermode: 'simple' | 'default' | 'material';
    attrPagerbuttonscount: number;
    attrPageable: boolean;
    attrAutofill: boolean;
    attrRowdetails: boolean;
    attrRowdetailstemplate: any;
    attrReady: () => void;
    attrRendered: (type: any) => void;
    attrRenderstatusbar: (statusbar?: jqwidgets.GridRenderstatusbar['statusbar']) => void;
    attrRendertoolbar: (toolbar?: jqwidgets.GridRendertoolbar['toolbar']) => void;
    attrRendergridrows: (params?: any) => any;
    attrSortable: boolean;
    attrSortmode: string;
    attrSelectedrowindex: number;
    attrSelectedrowindexes: Array<number>;
    attrSource: jqwidgets.GridSource;
    attrSorttogglestates: string;
    attrUpdatedelay: number;
    attrVirtualmode: boolean;
    attrVerticalscrollbarstep: number;
    attrVerticalscrollbarlargestep: number;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxGrid;
    content: String;
    container: HTMLDivElement;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    altrows(arg?: boolean): boolean;
    altstart(arg?: number): number;
    altstep(arg?: number): number;
    autoshowloadelement(arg?: boolean): boolean;
    autoshowfiltericon(arg?: boolean): boolean;
    autoshowcolumnsmenubutton(arg?: boolean): boolean;
    showcolumnlines(arg?: boolean): boolean;
    showrowlines(arg?: boolean): boolean;
    showcolumnheaderlines(arg?: boolean): boolean;
    adaptive(arg?: boolean): boolean;
    adaptivewidth(arg?: number): number;
    commandcolumn(arg?: boolean): boolean;
    commandcolumnrenderer(arg?: (row?: number, columnfield?: string, active?: any) => string): (row?: number, columnfield?: string, active?: any) => string;
    clipboard(arg?: boolean): boolean;
    closeablegroups(arg?: boolean): boolean;
    columnsmenuwidth(arg?: number): number;
    columnmenuopening(arg?: (menu?: jqwidgets.GridColumnmenuopening['menu'], datafield?: jqwidgets.GridColumnmenuopening['datafield'], height?: jqwidgets.GridColumnmenuopening['height']) => boolean | void): (menu?: jqwidgets.GridColumnmenuopening['menu'], datafield?: jqwidgets.GridColumnmenuopening['datafield'], height?: jqwidgets.GridColumnmenuopening['height']) => boolean | void;
    columnmenuclosing(arg?: (menu?: jqwidgets.GridColumnmenuclosing['menu'], datafield?: jqwidgets.GridColumnmenuclosing['datafield'], height?: jqwidgets.GridColumnmenuclosing['height']) => boolean): (menu?: jqwidgets.GridColumnmenuclosing['menu'], datafield?: jqwidgets.GridColumnmenuclosing['datafield'], height?: jqwidgets.GridColumnmenuclosing['height']) => boolean;
    cellhover(arg?: (cellhtmlElement?: jqwidgets.GridCellhover['cellhtmlElement'], x?: jqwidgets.GridCellhover['x'], y?: jqwidgets.GridCellhover['y']) => void): (cellhtmlElement?: jqwidgets.GridCellhover['cellhtmlElement'], x?: jqwidgets.GridCellhover['x'], y?: jqwidgets.GridCellhover['y']) => void;
    enablekeyboarddelete(arg?: boolean): boolean;
    enableellipsis(arg?: boolean): boolean;
    enablemousewheel(arg?: boolean): boolean;
    enableanimations(arg?: boolean): boolean;
    enabletooltips(arg?: boolean): boolean;
    enablehover(arg?: boolean): boolean;
    enablebrowserselection(arg?: boolean): boolean;
    everpresentrowposition(arg?: string): string;
    everpresentrowheight(arg?: number): number;
    everpresentrowactions(arg?: string): string;
    everpresentrowactionsmode(arg?: string): string;
    filterrowheight(arg?: number): number;
    filtermode(arg?: string): string;
    groupsrenderer(arg?: (text?: jqwidgets.GridGroupsrenderer['text'], group?: jqwidgets.GridGroupsrenderer['group'], expanded?: jqwidgets.GridGroupsrenderer['expanded'], data?: jqwidgets.GridGroupsrenderer['data']) => string): (text?: jqwidgets.GridGroupsrenderer['text'], group?: jqwidgets.GridGroupsrenderer['group'], expanded?: jqwidgets.GridGroupsrenderer['expanded'], data?: jqwidgets.GridGroupsrenderer['data']) => string;
    groupcolumnrenderer(arg?: (text?: jqwidgets.GridGroupcolumnrenderer['text']) => string): (text?: jqwidgets.GridGroupcolumnrenderer['text']) => string;
    groupsexpandedbydefault(arg?: boolean): boolean;
    handlekeyboardnavigation(arg?: (event: jqwidgets.GridHandlekeyboardnavigation['event']) => boolean): (event: jqwidgets.GridHandlekeyboardnavigation['event']) => boolean;
    pagerrenderer(arg?: () => any[]): () => any[];
    rtl(arg?: boolean): boolean;
    showdefaultloadelement(arg?: boolean): boolean;
    showfiltercolumnbackground(arg?: boolean): boolean;
    showfiltermenuitems(arg?: boolean): boolean;
    showpinnedcolumnbackground(arg?: boolean): boolean;
    showsortcolumnbackground(arg?: boolean): boolean;
    showsortmenuitems(arg?: boolean): boolean;
    showgroupmenuitems(arg?: boolean): boolean;
    showrowdetailscolumn(arg?: boolean): boolean;
    showheader(arg?: boolean): boolean;
    showgroupsheader(arg?: boolean): boolean;
    showaggregates(arg?: boolean): boolean;
    showgroupaggregates(arg?: boolean): boolean;
    showeverpresentrow(arg?: boolean): boolean;
    showfilterrow(arg?: boolean): boolean;
    showemptyrow(arg?: boolean): boolean;
    showstatusbar(arg?: boolean): boolean;
    statusbarheight(arg?: number): number;
    showtoolbar(arg?: boolean): boolean;
    showfilterbar(arg?: boolean): boolean;
    filterbarmode(arg?: string): string;
    selectionmode(arg?: string): string;
    updatefilterconditions(arg?: (type?: string, defaultconditions?: any) => any): (type?: string, defaultconditions?: any) => any;
    updatefilterpanel(arg?: (filtertypedropdown1?: any, filtertypedropdown2?: any, filteroperatordropdown?: any, filterinputfield1?: any, filterinputfield2?: any, filterbutton?: any, clearbutton?: any, columnfilter?: any, filtertype?: any, filterconditions?: any) => any): (filtertypedropdown1?: any, filtertypedropdown2?: any, filteroperatordropdown?: any, filterinputfield1?: any, filterinputfield2?: any, filterbutton?: any, clearbutton?: any, columnfilter?: any, filtertype?: any, filterconditions?: any) => any;
    theme(arg?: string): string;
    toolbarheight(arg?: number): number;
    autoheight(arg?: boolean): boolean;
    autorowheight(arg?: boolean): boolean;
    columnsheight(arg?: number): number;
    deferreddatafields(arg?: Array<string>): Array<string>;
    groupsheaderheight(arg?: number): number;
    groupindentwidth(arg?: number): number;
    height(arg?: number | string): number | string;
    pagerheight(arg?: number | string): number | string;
    rowsheight(arg?: number): number;
    scrollbarsize(arg?: number | string): number | string;
    scrollmode(arg?: string): string;
    scrollfeedback(arg?: (row: jqwidgets.GridScrollfeedback['row']) => string): (row: jqwidgets.GridScrollfeedback['row']) => string;
    width(arg?: string | number): string | number;
    autosavestate(arg?: boolean): boolean;
    autoloadstate(arg?: boolean): boolean;
    columns(arg?: jqwidgets.GridColumn[]): jqwidgets.GridColumn[];
    enableSanitize(arg?: boolean): boolean;
    cardview(arg?: boolean): boolean;
    cardviewcolumns(arg?: any): any;
    cardheight(arg?: number): number;
    cardsize(arg?: number): number;
    columngroups(arg?: Array<any>): Array<any>;
    columnsmenu(arg?: boolean): boolean;
    columnsresize(arg?: boolean): boolean;
    columnsautoresize(arg?: boolean): boolean;
    columnsreorder(arg?: boolean): boolean;
    charting(arg?: jqwidgets.GridCharting): jqwidgets.GridCharting;
    disabled(arg?: boolean): boolean;
    editable(arg?: boolean): boolean;
    batcheditable(arg?: boolean): boolean;
    editmode(arg?: string): string;
    filter(arg?: (cellValue?: jqwidgets.GridFilter['cellValue'], rowData?: jqwidgets.GridFilter['rowData'], dataField?: jqwidgets.GridFilter['dataField'], filterGroup?: jqwidgets.GridFilter['filterGroup'], defaultFilterResult?: jqwidgets.GridFilter['defaultFilterResult']) => any): (cellValue?: jqwidgets.GridFilter['cellValue'], rowData?: jqwidgets.GridFilter['rowData'], dataField?: jqwidgets.GridFilter['dataField'], filterGroup?: jqwidgets.GridFilter['filterGroup'], defaultFilterResult?: jqwidgets.GridFilter['defaultFilterResult']) => any;
    filterable(arg?: boolean): boolean;
    groupable(arg?: boolean): boolean;
    groups(arg?: Array<string>): Array<string>;
    horizontalscrollbarstep(arg?: number): number;
    horizontalscrollbarlargestep(arg?: number): number;
    initrowdetails(arg?: (index?: number, parentElement?: any, gridElement?: any, datarecord?: any) => void): (index?: number, parentElement?: any, gridElement?: any, datarecord?: any) => void;
    keyboardnavigation(arg?: boolean): boolean;
    localization(arg?: jqwidgets.GridLocalizationobject): jqwidgets.GridLocalizationobject;
    pagesize(arg?: number): number;
    pagesizeoptions(arg?: Array<number | string>): Array<number | string>;
    pagermode(arg?: 'simple' | 'default' | 'material'): 'simple' | 'default' | 'material';
    pagerbuttonscount(arg?: number): number;
    pageable(arg?: boolean): boolean;
    autofill(arg?: boolean): boolean;
    rowdetails(arg?: boolean): boolean;
    rowdetailstemplate(arg?: any): any;
    ready(arg?: () => void): () => void;
    rendered(arg?: (type: any) => void): (type: any) => void;
    renderstatusbar(arg?: (statusbar?: jqwidgets.GridRenderstatusbar['statusbar']) => void): (statusbar?: jqwidgets.GridRenderstatusbar['statusbar']) => void;
    rendertoolbar(arg?: (toolbar?: jqwidgets.GridRendertoolbar['toolbar']) => void): (toolbar?: jqwidgets.GridRendertoolbar['toolbar']) => void;
    rendergridrows(arg?: (params?: any) => any): (params?: any) => any;
    sortable(arg?: boolean): boolean;
    sortmode(arg?: string): string;
    selectedrowindex(arg?: number): number;
    selectedrowindexes(arg?: Array<number>): Array<number>;
    source(arg?: jqwidgets.GridSource): jqwidgets.GridSource;
    sorttogglestates(arg?: string): string;
    updatedelay(arg?: number): number;
    virtualmode(arg?: boolean): boolean;
    verticalscrollbarstep(arg?: number): number;
    verticalscrollbarlargestep(arg?: number): number;
    autoresizecolumns(type?: string): void;
    autoresizecolumn(dataField: string, type?: string): void;
    beginupdate(): void;
    clear(): void;
    createChart(type: string, dataSource?: undefined): void;
    destroy(): void;
    endupdate(): void;
    ensurerowvisible(rowBoundIndex: number): void;
    focus(): void;
    getcolumnindex(dataField: string): number;
    getcolumn(dataField: string): jqwidgets.GridGetColumn;
    getcolumnproperty(dataField: string, propertyName: string): any;
    getrowid(rowBoundIndex: number): string;
    getrowdata(rowBoundIndex: number): any;
    getrowdatabyid(rowID: string): any;
    getrowboundindexbyid(rowID: string): number;
    getrowboundindex(rowDisplayIndex: number): number;
    getrows(): Array<any>;
    getboundrows(): Array<any>;
    getdisplayrows(): Array<any>;
    getdatainformation(): jqwidgets.GridGetDataInformation;
    getsortinformation(): jqwidgets.GridGetSortInformation;
    getpaginginformation(): jqwidgets.GridGetPagingInformation;
    hidecolumn(dataField: string): void;
    hideloadelement(): void;
    hiderowdetails(rowBoundIndex: number): void;
    iscolumnvisible(dataField: string): boolean;
    iscolumnpinned(dataField: string): boolean;
    localizestrings(localizationobject: jqwidgets.GridLocalizationobject): void;
    pincolumn(dataField: string): void;
    refreshdata(): void;
    refresh(): void;
    render(): void;
    scrolloffset(top: number, left: number): void;
    scrollposition(): jqwidgets.GridScrollPosition;
    showloadelement(): void;
    showrowdetails(rowBoundIndex: number): void;
    setcolumnindex(dataField: string, index: number): void;
    setcolumnproperty(dataField: string, propertyName: any, propertyValue: any): void;
    showcolumn(dataField: string): void;
    unpincolumn(dataField: string): void;
    updatebounddata(type?: any): void;
    updating(): boolean;
    getsortcolumn(): string;
    removesort(): void;
    sortby(dataField: string, sortOrder: string): void;
    addgroup(dataField: string): void;
    cleargroups(): void;
    collapsegroup(group: number | string): void;
    collapseallgroups(): void;
    expandallgroups(): void;
    expandgroup(group: number | string): void;
    getrootgroupscount(): number;
    getgroup(groupIndex: number): jqwidgets.GridGetGroup;
    insertgroup(groupIndex: number, dataField: string): void;
    iscolumngroupable(): boolean;
    removegroupat(groupIndex: number): void;
    removegroup(dataField: string): void;
    addfilter(dataField: string, filterGroup: any, refreshGrid?: boolean): void;
    applyfilters(): void;
    clearfilters(): void;
    getfilterinformation(): any;
    getcolumnat(index: number): any;
    removefilter(dataField: string, refreshGrid: boolean): void;
    refreshfilterrow(): void;
    gotopage(pagenumber: number): void;
    gotoprevpage(): void;
    gotonextpage(): void;
    addrow(rowIds: any, data: any, rowPosition?: any): void;
    begincelledit(rowBoundIndex: number, dataField: string): void;
    beginrowedit(rowBoundIndex: number): void;
    closemenu(): void;
    deleterow(rowIds: string | number | Array<number | string>): void;
    endcelledit(rowBoundIndex: number, dataField: string, confirmChanges: boolean): void;
    endrowedit(rowBoundIndex: number, confirmChanges: boolean): void;
    getcell(rowBoundIndex: number, datafield: string): jqwidgets.GridGetCell;
    getcellatposition(left: number, top: number): jqwidgets.GridGetCell;
    getcelltext(rowBoundIndex: number, dataField: string): string;
    getcelltextbyid(rowID: string, dataField: string): string;
    getcellvaluebyid(rowID: string, dataField: string): any;
    getcellvalue(rowBoundIndex: number, dataField: string): any;
    isBindingCompleted(): boolean;
    openmenu(dataField: string): void;
    setcellvalue(rowBoundIndex: number, dataField: string, value: any): void;
    setcellvaluebyid(rowID: string, dataField: string, value: any): void;
    showvalidationpopup(rowBoundIndex: number, dataField: string, validationMessage: string): void;
    updaterow(rowIds: string | number | Array<number | string>, data: any): void;
    clearselection(): void;
    getselectedrowindex(): number;
    getselectedrowindexes(): Array<number>;
    getselectedcell(): jqwidgets.GridGetSelectedCell;
    getselectedcells(): Array<jqwidgets.GridGetSelectedCell>;
    selectcell(rowBoundIndex: number, dataField: string): void;
    selectallrows(): void;
    selectrow(rowBoundIndex: number): void;
    unselectrow(rowBoundIndex: number): void;
    unselectcell(rowBoundIndex: number, dataField: string): void;
    getcolumnaggregateddata(dataField: string, aggregates: Array<any>): string;
    refreshaggregates(): void;
    renderaggregates(): void;
    exportdata(dataType: string, fileName?: string, exportHeader?: boolean, rows?: Array<number>, exportHiddenColumns?: boolean, serverURL?: string, charSet?: string): any;
    exportview(dataType: string, fileName?: string): any;
    openColumnChooser(columns?: any, header?: string): void;
    getstate(): jqwidgets.GridGetState;
    loadstate(stateobject: any): void;
    savestate(): jqwidgets.GridGetState;
    onBindingcomplete: EventEmitter<any>;
    onColumnresized: EventEmitter<any>;
    onColumnreordered: EventEmitter<any>;
    onColumnclick: EventEmitter<any>;
    onCellclick: EventEmitter<any>;
    onCelldoubleclick: EventEmitter<any>;
    onCellselect: EventEmitter<any>;
    onCellunselect: EventEmitter<any>;
    onCellvaluechanged: EventEmitter<any>;
    onCellbeginedit: EventEmitter<any>;
    onCellendedit: EventEmitter<any>;
    onFilter: EventEmitter<any>;
    onGroupschanged: EventEmitter<any>;
    onGroupexpand: EventEmitter<any>;
    onGroupcollapse: EventEmitter<any>;
    onPagechanged: EventEmitter<any>;
    onPagesizechanged: EventEmitter<any>;
    onRowclick: EventEmitter<any>;
    onRowdoubleclick: EventEmitter<any>;
    onRowselect: EventEmitter<any>;
    onRowunselect: EventEmitter<any>;
    onRowexpand: EventEmitter<any>;
    onRowcollapse: EventEmitter<any>;
    onSort: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxGridComponent, "jqxGrid", never, { "attrAltrows": "altrows"; "attrAltstart": "altstart"; "attrAltstep": "altstep"; "attrAutoshowloadelement": "autoshowloadelement"; "attrAutoshowfiltericon": "autoshowfiltericon"; "attrAutoshowcolumnsmenubutton": "autoshowcolumnsmenubutton"; "attrShowcolumnlines": "showcolumnlines"; "attrShowrowlines": "showrowlines"; "attrShowcolumnheaderlines": "showcolumnheaderlines"; "attrAdaptive": "adaptive"; "attrAdaptivewidth": "adaptivewidth"; "attrCommandcolumn": "commandcolumn"; "attrCommandcolumnrenderer": "commandcolumnrenderer"; "attrClipboard": "clipboard"; "attrCloseablegroups": "closeablegroups"; "attrColumnsmenuwidth": "columnsmenuwidth"; "attrColumnmenuopening": "columnmenuopening"; "attrColumnmenuclosing": "columnmenuclosing"; "attrCellhover": "cellhover"; "attrEnablekeyboarddelete": "enablekeyboarddelete"; "attrEnableellipsis": "enableellipsis"; "attrEnablemousewheel": "enablemousewheel"; "attrEnableanimations": "enableanimations"; "attrEnabletooltips": "enabletooltips"; "attrEnablehover": "enablehover"; "attrEnablebrowserselection": "enablebrowserselection"; "attrEverpresentrowposition": "everpresentrowposition"; "attrEverpresentrowheight": "everpresentrowheight"; "attrEverpresentrowactions": "everpresentrowactions"; "attrEverpresentrowactionsmode": "everpresentrowactionsmode"; "attrFilterrowheight": "filterrowheight"; "attrFiltermode": "filtermode"; "attrGroupsrenderer": "groupsrenderer"; "attrGroupcolumnrenderer": "groupcolumnrenderer"; "attrGroupsexpandedbydefault": "groupsexpandedbydefault"; "attrHandlekeyboardnavigation": "handlekeyboardnavigation"; "attrPagerrenderer": "pagerrenderer"; "attrRtl": "rtl"; "attrShowdefaultloadelement": "showdefaultloadelement"; "attrShowfiltercolumnbackground": "showfiltercolumnbackground"; "attrShowfiltermenuitems": "showfiltermenuitems"; "attrShowpinnedcolumnbackground": "showpinnedcolumnbackground"; "attrShowsortcolumnbackground": "showsortcolumnbackground"; "attrShowsortmenuitems": "showsortmenuitems"; "attrShowgroupmenuitems": "showgroupmenuitems"; "attrShowrowdetailscolumn": "showrowdetailscolumn"; "attrShowheader": "showheader"; "attrShowgroupsheader": "showgroupsheader"; "attrShowaggregates": "showaggregates"; "attrShowgroupaggregates": "showgroupaggregates"; "attrShoweverpresentrow": "showeverpresentrow"; "attrShowfilterrow": "showfilterrow"; "attrShowemptyrow": "showemptyrow"; "attrShowstatusbar": "showstatusbar"; "attrStatusbarheight": "statusbarheight"; "attrShowtoolbar": "showtoolbar"; "attrShowfilterbar": "showfilterbar"; "attrFilterbarmode": "filterbarmode"; "attrSelectionmode": "selectionmode"; "attrUpdatefilterconditions": "updatefilterconditions"; "attrUpdatefilterpanel": "updatefilterpanel"; "attrTheme": "theme"; "attrToolbarheight": "toolbarheight"; "attrAutoheight": "autoheight"; "attrAutorowheight": "autorowheight"; "attrColumnsheight": "columnsheight"; "attrDeferreddatafields": "deferreddatafields"; "attrGroupsheaderheight": "groupsheaderheight"; "attrGroupindentwidth": "groupindentwidth"; "attrPagerheight": "pagerheight"; "attrRowsheight": "rowsheight"; "attrScrollbarsize": "scrollbarsize"; "attrScrollmode": "scrollmode"; "attrScrollfeedback": "scrollfeedback"; "attrAutosavestate": "autosavestate"; "attrAutoloadstate": "autoloadstate"; "attrColumns": "columns"; "attrEnableSanitize": "enableSanitize"; "attrCardview": "cardview"; "attrCardviewcolumns": "cardviewcolumns"; "attrCardheight": "cardheight"; "attrCardsize": "cardsize"; "attrColumngroups": "columngroups"; "attrColumnsmenu": "columnsmenu"; "attrColumnsresize": "columnsresize"; "attrColumnsautoresize": "columnsautoresize"; "attrColumnsreorder": "columnsreorder"; "attrCharting": "charting"; "attrDisabled": "disabled"; "attrEditable": "editable"; "attrBatcheditable": "batcheditable"; "attrEditmode": "editmode"; "attrFilter": "filter"; "attrFilterable": "filterable"; "attrGroupable": "groupable"; "attrGroups": "groups"; "attrHorizontalscrollbarstep": "horizontalscrollbarstep"; "attrHorizontalscrollbarlargestep": "horizontalscrollbarlargestep"; "attrInitrowdetails": "initrowdetails"; "attrKeyboardnavigation": "keyboardnavigation"; "attrLocalization": "localization"; "attrPagesize": "pagesize"; "attrPagesizeoptions": "pagesizeoptions"; "attrPagermode": "pagermode"; "attrPagerbuttonscount": "pagerbuttonscount"; "attrPageable": "pageable"; "attrAutofill": "autofill"; "attrRowdetails": "rowdetails"; "attrRowdetailstemplate": "rowdetailstemplate"; "attrReady": "ready"; "attrRendered": "rendered"; "attrRenderstatusbar": "renderstatusbar"; "attrRendertoolbar": "rendertoolbar"; "attrRendergridrows": "rendergridrows"; "attrSortable": "sortable"; "attrSortmode": "sortmode"; "attrSelectedrowindex": "selectedrowindex"; "attrSelectedrowindexes": "selectedrowindexes"; "attrSource": "source"; "attrSorttogglestates": "sorttogglestates"; "attrUpdatedelay": "updatedelay"; "attrVirtualmode": "virtualmode"; "attrVerticalscrollbarstep": "verticalscrollbarstep"; "attrVerticalscrollbarlargestep": "verticalscrollbarlargestep"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onBindingcomplete": "onBindingcomplete"; "onColumnresized": "onColumnresized"; "onColumnreordered": "onColumnreordered"; "onColumnclick": "onColumnclick"; "onCellclick": "onCellclick"; "onCelldoubleclick": "onCelldoubleclick"; "onCellselect": "onCellselect"; "onCellunselect": "onCellunselect"; "onCellvaluechanged": "onCellvaluechanged"; "onCellbeginedit": "onCellbeginedit"; "onCellendedit": "onCellendedit"; "onFilter": "onFilter"; "onGroupschanged": "onGroupschanged"; "onGroupexpand": "onGroupexpand"; "onGroupcollapse": "onGroupcollapse"; "onPagechanged": "onPagechanged"; "onPagesizechanged": "onPagesizechanged"; "onRowclick": "onRowclick"; "onRowdoubleclick": "onRowdoubleclick"; "onRowselect": "onRowselect"; "onRowunselect": "onRowunselect"; "onRowexpand": "onRowexpand"; "onRowcollapse": "onRowcollapse"; "onSort": "onSort"; }, never, ["*"]>;
}
