/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class jqxSliderComponent implements ControlValueAccessor, OnChanges {
    attrButtonsPosition: string;
    attrDisabled: boolean;
    attrLayout: string;
    attrMode: string;
    attrMinorTicksFrequency: number;
    attrMinorTickSize: number;
    attrMax: number;
    attrMin: number;
    attrOrientation: string;
    attrRangeSlider: boolean;
    attrRtl: boolean;
    attrStep: number;
    attrShowTicks: boolean;
    attrShowMinorTicks: boolean;
    attrShowTickLabels: boolean;
    attrShowButtons: boolean;
    attrShowRange: boolean;
    attrTemplate: string;
    attrTheme: string;
    attrTicksPosition: string;
    attrTicksFrequency: number;
    attrTickSize: number;
    attrTickLabelFormatFunction: (value: jqwidgets.SliderTickLabelFormatFunction['value']) => string;
    attrTooltip: boolean;
    attrTooltipHideDelay: number;
    attrTooltipPosition: string;
    attrTooltipFormatFunction: (value: jqwidgets.SliderTooltipFormatFunction['value']) => any;
    attrValue: any;
    attrValues: Array<number>;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxSlider;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    get ngValue(): any;
    set ngValue(value: any);
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setOptions(options: any): void;
    buttonsPosition(arg?: string): string;
    disabled(arg?: boolean): boolean;
    height(arg?: string | number): string | number;
    layout(arg?: string): string;
    mode(arg?: string): string;
    minorTicksFrequency(arg?: number): number;
    minorTickSize(arg?: number): number;
    max(arg?: number): number;
    min(arg?: number): number;
    orientation(arg?: string): string;
    rangeSlider(arg?: boolean): boolean;
    rtl(arg?: boolean): boolean;
    step(arg?: number): number;
    showTicks(arg?: boolean): boolean;
    showMinorTicks(arg?: boolean): boolean;
    showTickLabels(arg?: boolean): boolean;
    showButtons(arg?: boolean): boolean;
    showRange(arg?: boolean): boolean;
    template(arg?: string): string;
    theme(arg?: string): string;
    ticksPosition(arg?: string): string;
    ticksFrequency(arg?: number): number;
    tickSize(arg?: number): number;
    tickLabelFormatFunction(arg?: (value: jqwidgets.SliderTickLabelFormatFunction['value']) => string): (value: jqwidgets.SliderTickLabelFormatFunction['value']) => string;
    tooltip(arg?: boolean): boolean;
    tooltipHideDelay(arg?: number): number;
    tooltipPosition(arg?: string): string;
    tooltipFormatFunction(arg?: (value: jqwidgets.SliderTooltipFormatFunction['value']) => any): (value: jqwidgets.SliderTooltipFormatFunction['value']) => any;
    value(arg?: any): any;
    values(arg?: Array<number>): Array<number>;
    width(arg?: number | string): number | string;
    destroy(): void;
    decrementValue(): void;
    disable(): void;
    enable(): void;
    focus(): void;
    getValue(): number;
    incrementValue(): void;
    setValue(index: number | number[]): void;
    val(value?: string): any;
    onChange: EventEmitter<any>;
    onSlide: EventEmitter<any>;
    onSlideStart: EventEmitter<any>;
    onSlideEnd: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxSliderComponent, "jqxSlider", never, { "attrButtonsPosition": "buttonsPosition"; "attrDisabled": "disabled"; "attrLayout": "layout"; "attrMode": "mode"; "attrMinorTicksFrequency": "minorTicksFrequency"; "attrMinorTickSize": "minorTickSize"; "attrMax": "max"; "attrMin": "min"; "attrOrientation": "orientation"; "attrRangeSlider": "rangeSlider"; "attrRtl": "rtl"; "attrStep": "step"; "attrShowTicks": "showTicks"; "attrShowMinorTicks": "showMinorTicks"; "attrShowTickLabels": "showTickLabels"; "attrShowButtons": "showButtons"; "attrShowRange": "showRange"; "attrTemplate": "template"; "attrTheme": "theme"; "attrTicksPosition": "ticksPosition"; "attrTicksFrequency": "ticksFrequency"; "attrTickSize": "tickSize"; "attrTickLabelFormatFunction": "tickLabelFormatFunction"; "attrTooltip": "tooltip"; "attrTooltipHideDelay": "tooltipHideDelay"; "attrTooltipPosition": "tooltipPosition"; "attrTooltipFormatFunction": "tooltipFormatFunction"; "attrValue": "value"; "attrValues": "values"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; "onSlide": "onSlide"; "onSlideStart": "onSlideStart"; "onSlideEnd": "onSlideEnd"; }, never, ["*"]>;
}
