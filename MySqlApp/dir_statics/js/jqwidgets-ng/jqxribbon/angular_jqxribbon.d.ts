/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxRibbonComponent implements OnChanges {
    attrAnimationType: string;
    attrAnimationDelay: number | string;
    attrDisabled: boolean;
    attrInitContent: (index: any) => void;
    attrMode: string;
    attrPopupCloseMode: string;
    attrPosition: string;
    attrReorder: boolean;
    attrRtl: boolean;
    attrSelectedIndex: number;
    attrSelectionMode: string;
    attrScrollPosition: string;
    attrScrollStep: number;
    attrScrollDelay: number;
    attrTheme: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxRibbon;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    animationType(arg?: string): string;
    animationDelay(arg?: number | string): number | string;
    disabled(arg?: boolean): boolean;
    height(arg?: number | string): number | string;
    initContent(arg?: (index: any) => void): (index: any) => void;
    mode(arg?: string): string;
    popupCloseMode(arg?: string): string;
    position(arg?: string): string;
    reorder(arg?: boolean): boolean;
    rtl(arg?: boolean): boolean;
    selectedIndex(arg?: number): number;
    selectionMode(arg?: string): string;
    scrollPosition(arg?: string): string;
    scrollStep(arg?: number): number;
    scrollDelay(arg?: number): number;
    theme(arg?: string): string;
    width(arg?: string | number): string | number;
    addAt(index: number, item: jqwidgets.RibbonItem): void;
    clearSelection(): void;
    disableAt(index: number): void;
    destroy(): void;
    enableAt(index: number): void;
    hideAt(index: number): void;
    removeAt(index: number): void;
    render(): void;
    refresh(): void;
    selectAt(index: number): void;
    showAt(index: number): void;
    setPopupLayout(index: number, layout: any, width: number | string, height: number | string): void;
    updateAt(index: number, item: jqwidgets.RibbonItem): void;
    val(value?: string): any;
    onChange: EventEmitter<any>;
    onReorder: EventEmitter<any>;
    onSelect: EventEmitter<any>;
    onUnselect: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxRibbonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxRibbonComponent, "jqxRibbon", never, { "attrAnimationType": "animationType"; "attrAnimationDelay": "animationDelay"; "attrDisabled": "disabled"; "attrInitContent": "initContent"; "attrMode": "mode"; "attrPopupCloseMode": "popupCloseMode"; "attrPosition": "position"; "attrReorder": "reorder"; "attrRtl": "rtl"; "attrSelectedIndex": "selectedIndex"; "attrSelectionMode": "selectionMode"; "attrScrollPosition": "scrollPosition"; "attrScrollStep": "scrollStep"; "attrScrollDelay": "scrollDelay"; "attrTheme": "theme"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; "onReorder": "onReorder"; "onSelect": "onSelect"; "onUnselect": "onUnselect"; }, never, ["*"]>;
}
