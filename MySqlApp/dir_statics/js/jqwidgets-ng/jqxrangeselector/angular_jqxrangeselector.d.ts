/// <reference path="../jqwidgets.d.ts" />
import { EventEmitter, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class jqxRangeSelectorComponent implements OnChanges {
    attrDisabled: boolean;
    attrGroupLabelsFormatFunction: (value: jqwidgets.RangeSelectorGroupLabelsFormatFunction['value'], date: jqwidgets.RangeSelectorGroupLabelsFormatFunction['date']) => string;
    attrLabelsFormat: string;
    attrLabelsFormatFunction: (value: jqwidgets.RangeSelectorLabelsFormatFunction['value']) => string;
    attrLabelsOnTicks: boolean;
    attrMarkersFormat: string;
    attrMarkersFormatFunction: (value: jqwidgets.RangeSelectorMarkersFormatFunction['value'], position: jqwidgets.RangeSelectorMarkersFormatFunction['position']) => string;
    attrMajorTicksInterval: any;
    attrMinorTicksInterval: any;
    attrMax: any;
    attrMin: any;
    attrMoveOnClick: boolean;
    attrPadding: number | string;
    attrRange: jqwidgets.RangeSelectorRange;
    attrResizable: boolean;
    attrRtl: boolean;
    attrShowGroupLabels: boolean;
    attrShowMinorTicks: boolean;
    attrSnapToTicks: boolean;
    attrShowMajorLabels: boolean;
    attrShowMarkers: boolean;
    attrTheme: string;
    attrWidth: string | number;
    attrHeight: string | number;
    autoCreate: boolean;
    properties: string[];
    host: any;
    elementRef: ElementRef;
    widgetObject: jqwidgets.jqxRangeSelector;
    constructor(containerElement: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): boolean;
    arraysEqual(attrValue: any, hostValue: any): boolean;
    manageAttributes(): any;
    moveClasses(parentEl: HTMLElement, childEl: HTMLElement): void;
    moveStyles(parentEl: HTMLElement, childEl: HTMLElement): void;
    createComponent(options?: any): void;
    createWidget(options?: any): void;
    __updateRect__(): void;
    setOptions(options: any): void;
    disabled(arg?: boolean): boolean;
    groupLabelsFormatFunction(arg?: (value: jqwidgets.RangeSelectorGroupLabelsFormatFunction['value'], date: jqwidgets.RangeSelectorGroupLabelsFormatFunction['date']) => string): (value: jqwidgets.RangeSelectorGroupLabelsFormatFunction['value'], date: jqwidgets.RangeSelectorGroupLabelsFormatFunction['date']) => string;
    height(arg?: string | number): string | number;
    labelsFormat(arg?: string): string;
    labelsFormatFunction(arg?: (value: jqwidgets.RangeSelectorLabelsFormatFunction['value']) => string): (value: jqwidgets.RangeSelectorLabelsFormatFunction['value']) => string;
    labelsOnTicks(arg?: boolean): boolean;
    markersFormat(arg?: string): string;
    markersFormatFunction(arg?: (value: jqwidgets.RangeSelectorMarkersFormatFunction['value'], position: jqwidgets.RangeSelectorMarkersFormatFunction['position']) => string): (value: jqwidgets.RangeSelectorMarkersFormatFunction['value'], position: jqwidgets.RangeSelectorMarkersFormatFunction['position']) => string;
    majorTicksInterval(arg?: any): any;
    minorTicksInterval(arg?: any): any;
    max(arg?: any): any;
    min(arg?: any): any;
    moveOnClick(arg?: boolean): boolean;
    padding(arg?: number | string): number | string;
    range(arg?: jqwidgets.RangeSelectorRange): jqwidgets.RangeSelectorRange;
    resizable(arg?: boolean): boolean;
    rtl(arg?: boolean): boolean;
    showGroupLabels(arg?: boolean): boolean;
    showMinorTicks(arg?: boolean): boolean;
    snapToTicks(arg?: boolean): boolean;
    showMajorLabels(arg?: boolean): boolean;
    showMarkers(arg?: boolean): boolean;
    theme(arg?: string): string;
    width(arg?: string | number): string | number;
    destroy(): void;
    getRange(): jqwidgets.RangeSelectorGetRange;
    render(): void;
    refresh(): void;
    setRange(from: any, to: any): void;
    onChange: EventEmitter<any>;
    __wireEvents__(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<jqxRangeSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<jqxRangeSelectorComponent, "jqxRangeSelector", never, { "attrDisabled": "disabled"; "attrGroupLabelsFormatFunction": "groupLabelsFormatFunction"; "attrLabelsFormat": "labelsFormat"; "attrLabelsFormatFunction": "labelsFormatFunction"; "attrLabelsOnTicks": "labelsOnTicks"; "attrMarkersFormat": "markersFormat"; "attrMarkersFormatFunction": "markersFormatFunction"; "attrMajorTicksInterval": "majorTicksInterval"; "attrMinorTicksInterval": "minorTicksInterval"; "attrMax": "max"; "attrMin": "min"; "attrMoveOnClick": "moveOnClick"; "attrPadding": "padding"; "attrRange": "range"; "attrResizable": "resizable"; "attrRtl": "rtl"; "attrShowGroupLabels": "showGroupLabels"; "attrShowMinorTicks": "showMinorTicks"; "attrSnapToTicks": "snapToTicks"; "attrShowMajorLabels": "showMajorLabels"; "attrShowMarkers": "showMarkers"; "attrTheme": "theme"; "attrWidth": "width"; "attrHeight": "height"; "autoCreate": "auto-create"; }, { "onChange": "onChange"; }, never, ["*"]>;
}
